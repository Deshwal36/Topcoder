package com.Topcoder.rest.webservices.springbootjpapostgresql.Train;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.NoHandlerFoundException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
import com.Topcoder.rest.webservices.springbootjpapostgresql.Train.EntityNotFound;
@ControllerAdvice
public class HandleControllerException extends ResponseEntityExceptionHandler{
			
	public HandleControllerException() {
        super();
    }
	
	 @ExceptionHandler({ DataIntegrityViolationException.class })
	    public ResponseEntity<Object> handleBadRequest(final DataIntegrityViolationException ex, final WebRequest request) {
	        final String bodyOfResponse = "This should be application specific";
	        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.BAD_REQUEST, request);
	    }
//	@ExceptionHandler({EntityNotFound.class}){
//		public ResponseEntity<GenericResponse> customHandleNotFound(Exception ex, WebRequest request) {
//	        return new ResponseEntity<>(new GenericResponse(ex.getMessage(), null), HttpStatus.NOT_FOUND);
//	    }
	
	//405
	 
	@Override
    public ResponseEntity<Object> handleHttpRequestMethodNotSupported(final HttpRequestMethodNotSupportedException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {
        //logger.info(ex.getClass().getName());
        //
        //final StringBuilder builder = new StringBuilder();
        //builder.append(ex.getMethod());
		String msg="invalid endpoint";
        //builder.append("invalid endpoint");
        

        final ApiError apiError = new ApiError(HttpStatus.METHOD_NOT_ALLOWED, msg);
        return new ResponseEntity<Object>(apiError.getMessage(), new HttpHeaders(), apiError.getStatus());
    }
	
	 // 404
	@ExceptionHandler(NoHandlerFoundException.class)
    @Override
    public ResponseEntity<Object> handleNoHandlerFoundException(final NoHandlerFoundException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {
        //logger.info(ex.getClass().getName());
        //
        final String msg="invalid endpoint";
        //final String error = "No handler found for " + ex.getHttpMethod() + " " + ex.getRequestURL();
        
        final ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, msg);
        return new ResponseEntity<Object>(apiError.getMessage(), new HttpHeaders(), apiError.getStatus());
    }
}

